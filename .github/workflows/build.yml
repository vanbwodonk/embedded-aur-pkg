name: BUILD

on:
  push:
  schedule:
    - cron:  '1 */8 * * *'

jobs:
  buildAUR:
    strategy:
      matrix:
        repos: [ picoscope7beta, ps7b_libps2000, ps7b_libps2000a, ps7b_libps3000, ps7b_libps3000a, ps7b_libps4000, ps7b_libps4000a, ps7b_libps5000, ps7b_libps5000a, ps7b_libps6000, ps7b_libps6000a, nanovna-saver, ltspice, coil64, imsprog, hterm, aria2-pro, can-utils, pico-sdk, picotool, esp-idf, oss-cad-suite-build-bin, serial-studio, saleae-logic2, packetsender, xc3sprog-svn, eagle, qelectrotech]
        include:
          # - repos: dsview
          #   preinstall-pkgs: "libusb"
          - repos: xc3sprog-svn
            preinstall-pkgs: "svn"

      fail-fast: false
      
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: ./build-aur-action
      with:
        repo-name: ${{ matrix.repos }}
        preinstallPkgs: ${{ matrix.preinstall-pkgs }}
    
    - run: sudo rm -f ./*/*-debug-*
    - uses: actions/upload-artifact@v4
      with:
        path: ./*/*.pkg.tar*
        name: ${{ matrix.repos }}
        if-no-files-found: error
        
    # - uses: ncipollo/release-action@v1
    #   with:
    #     allowUpdates: true
    #     tag: "packages"
    #     artifacts: "./*/*.pkg.tar*"
    #     token: ${{ secrets.GH_TOKEN }}

  # buildGOWIN:
  #   strategy:
  #     matrix:
  #       repos: [gowin-eda-ide]
  #
  #     fail-fast: false
  #
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #   - uses: actions/checkout@v3
  #
  #   - uses: ./build-gowin-action
  #     with:
  #       repo-name: ${{ matrix.repos }}
  #       preinstallPkgs: ${{ matrix.preinstall-pkgs }}
  #
  #   - uses: actions/upload-artifact@v3
  #     with:
  #       path: ./*/*.pkg.tar.zst
  #       name: ${{ matrix.repos }}
  #       if-no-files-found: error
  #
  #   - uses: ncipollo/release-action@v1
  #     with:
  #       allowUpdates: true
  #       tag: "packages"
  #       artifacts: "./*/*.zst"
  #       token: ${{ secrets.GH_TOKEN }}

  # buildGOWINedu:
  #   strategy:
  #     matrix:
  #       repos: [gowin-eda-edu-ide]
  #
  #     fail-fast: false
  #
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #   - uses: actions/checkout@v3permissions: write-all
  #
  #   - uses: ./build-gowin-edu-action
  #     with:
  #       repo-name: ${{ matrix.repos }}
  #       preinstallPkgs: ${{ matrix.preinstall-pkgs }}
  #
  #   - run: sudo rm -f ./*/*-debug-*
  #   - uses: actions/upload-artifact@v3
  #     with:
  #       path: ./*/*.pkg.tar.zst
  #       name: ${{ matrix.repos }}
  #       if-no-files-found: error
  #
  #   - uses: ncipollo/release-action@v1
  #     with:
  #       allowUpdates: true
  #       tag: "packages"
  #       artifacts: "./*/*.zst"
  #       token: ${{ secrets.GH_TOKEN }}

  buildNonAUR:
    strategy:
      matrix:
        PKGBUILDs: [avrdudess, progit, serialplot-git, gowin-eda-edu, pico-pioasm-bin, hackrf-spectrum-analyzer, adf435x, mmana-gal, dishal, stm32-cubemx]

      fail-fast: false

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build Non-AUR packages
        id: makepkg
        uses: ./build-nonaur-action
        with:
          pkgdir: ${{ matrix.PKGBUILDs }}
          aurDeps: true

      - run: sudo rm -f ./*/*-debug-*
      - uses: actions/upload-artifact@v4
        with:
          path: ./*/*.pkg.tar.zst
          name: ${{ matrix.PKGBUILDs }}
          if-no-files-found: error

      # - uses: ncipollo/release-action@v1
      #   with:
      #     allowUpdates: true
      #     tag: "packages"
      #     artifacts: ${{ steps.makepkg.outputs.pkgfile0 }}
      #     token: ${{ secrets.GH_TOKEN }}

  uploadDB:
    permissions: write-all
    runs-on: ubuntu-latest
    if: always()
    needs: [buildAUR, buildNonAUR]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        id: download

      - name: Display structure of downloaded files
        run: ls -R ${{ steps.download.outputs.download-path }}

      - uses: ./create-db-and-upload-action
        with:
          # RCLONE_ONEDRIVE_CLIENT_ID: ${{ secrets.RCLONE_ONEDRIVE_CLIENT_ID }}
          # RCLONE_ONEDRIVE_CLIENT_SECRET: ${{ secrets.RCLONE_ONEDRIVE_CLIENT_SECRET }}
          # RCLONE_ONEDRIVE_REGION: global
          # RCLONE_ONEDRIVE_TOKEN: ${{ secrets.RCLONE_ONEDRIVE_TOKEN }}
          # RCLONE_ONEDRIVE_DRIVE_ID: ${{ secrets.RCLONE_ONEDRIVE_DRIVE_ID }}
          # RCLONE_ONEDRIVE_DRIVE_TYPE: personal
          dest_path: /embedded-aur-pkg
          repo_name: embedded-aur
          gpg-privatekey: ${{ secrets.gpg_private_key }}
          local_path: ${{ steps.download.outputs.download-path }}

      - name: Display DB
        run: ls -R ./upload_packages/*

      - name: Display files
        run: ls -R ./*

      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: "packages"
          artifacts: "./upload_packages/*"
          token: ${{ secrets.GH_TOKEN }}
